use "std.dl";

/* Standard recursive fibonacci definition */
let fibo <- { x |
    cond
    | x == 0 -> 1;
    | x == 1 -> 1;
    | otherwise -> fibo (x - 1) + fibo (x - 2);
    end;
};


/* Prettier, less deeply recursive fibonacci */
let fib <- { a b x |
  cond
  | x == 0 -> a;
  | otherwise -> fib b (a + b) (x - 1);
  end;
};

/* Currying is available */
let flatfibo <- fib 1 1;

let tracefibo <- { a b x |
  cond
  | x == 0 -> print! "exiting";
  end;
  cond
  | x == 0 -> a;
  | otherwise ->
    print! "going deeper";
    tracefibo b (a + b) (x - 1);
  end;
};

/* Test for scope */
let a <- "outer";
let f! <- { ! |
	let showA! <- { ! | print! a; };
	showA!;
	let a <- "inner";
	showA!;
};

/* Mutual recursion */
let odd <- { x |
        cond
        | (x == 0) -> 0;
        | otherwise -> even (x - 1);
        end;
    },
    even <- { x | 
        cond
        | (x == 0) -> 1;
        | otherwise -> odd (x - 1);
        end;
    };

/* As useful as expected, but proves TCE works. */
let loop_forever! <- { ! | loop_forever!; };

let hello! <- { ! | forever! { ! | print! "Hello!"; }; };
